Object.defineProperty(exports, "__esModule", { value: true });
exports.nativeCrash = exports.close = exports.init = void 0;
const browser_1 = require("@sentry/browser");
const core_1 = require("@sentry/core");
const default_1 = require("./integrations/default");
const scopeSync_1 = require("./scopeSync");
const encodePolyfill_1 = require("./transports/encodePolyfill");
const native_1 = require("./transports/native");
const safeFactory_1 = require("./utils/safeFactory");
const textEncoder_1 = require("./utils/textEncoder");
const wrapper_1 = require("./wrapper");
/**
 * Initializes the Capacitor SDK alongside a sibling Sentry SDK
 * @param options Options for the SDK
 * @param originalInit The init function of the sibling SDK, leave blank to initialize with `@sentry/browser`
 */
function init(passedOptions, originalInit = browser_1.init) {
    var _a, _b, _c;
    const finalOptions = {
        enableAutoSessionTracking: true,
        enableWatchdogTerminationTracking: true,
        enableCaptureFailedRequests: false,
        ...passedOptions,
    };
    if (finalOptions.enabled === false || wrapper_1.NATIVE.platform === 'web') {
        finalOptions.enableNative = false;
        finalOptions.enableNativeNagger = false;
    }
    else {
        // keep the original value if user defined it.
        (_a = finalOptions.enableNativeNagger) !== null && _a !== void 0 ? _a : (finalOptions.enableNativeNagger = true);
        (_b = finalOptions.enableNative) !== null && _b !== void 0 ? _b : (finalOptions.enableNative = true);
    }
    //  const capacitorHub = new Hub(undefined, new CapacitorScope());
    //  makeMain(capacitorHub);
    const defaultIntegrations = passedOptions.defaultIntegrations === undefined
        ? (0, default_1.getDefaultIntegrations)(passedOptions)
        : passedOptions.defaultIntegrations;
    finalOptions.integrations = (0, core_1.getIntegrationsToSetup)({
        integrations: (0, safeFactory_1.safeFactory)(passedOptions.integrations, {
            loggerMessage: 'The integrations threw an error',
        }),
        defaultIntegrations,
    });
    if (finalOptions.enableNative &&
        !passedOptions.transport &&
        wrapper_1.NATIVE.platform !== 'web') {
        finalOptions.transport = passedOptions.transport || native_1.makeNativeTransport;
        finalOptions.transportOptions = {
            ...((_c = passedOptions.transportOptions) !== null && _c !== void 0 ? _c : {}),
            bufferSize: native_1.DEFAULT_BUFFER_SIZE,
        };
    }
    if (!(0, textEncoder_1.IsTextEncoderAvailable)()) {
        (0, encodePolyfill_1.useEncodePolyfill)();
    }
    if (finalOptions.enableNative) {
        (0, scopeSync_1.enableSyncToNative)((0, core_1.getGlobalScope)());
        (0, scopeSync_1.enableSyncToNative)((0, core_1.getIsolationScope)());
    }
    const browserOptions = {
        ...finalOptions,
        autoSessionTracking: wrapper_1.NATIVE.platform === 'web' && finalOptions.enableAutoSessionTracking,
    };
    const mobileOptions = {
        ...finalOptions,
        enableAutoSessionTracking: wrapper_1.NATIVE.platform !== 'web' && finalOptions.enableAutoSessionTracking,
    };
    // We first initialize the NATIVE SDK to avoid the Javascript SDK to invoke any
    // feature from the NATIVE SDK without the options being set.
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    void wrapper_1.NATIVE.initNativeSdk(mobileOptions);
    originalInit(browserOptions);
}
exports.init = init;
/**
 * Closes the SDK, stops sending events.
 */
async function close() {
    try {
        const client = (0, core_1.getClient)();
        if (client) {
            await client.close();
            await wrapper_1.NATIVE.closeNativeSdk();
        }
    }
    catch (e) {
        core_1.logger.error('Failed to close the SDK');
    }
}
exports.close = close;
/**
 * If native client is available it will trigger a native crash
 * Use this only for testing purposes
 */
function nativeCrash() {
    wrapper_1.NATIVE.crash();
}
exports.nativeCrash = nativeCrash;
//# sourceMappingURL=sdk.js.map
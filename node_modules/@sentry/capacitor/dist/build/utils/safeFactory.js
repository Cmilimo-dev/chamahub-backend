Object.defineProperty(exports, "__esModule", { value: true });
exports.safeTracesSampler = exports.safeFactory = void 0;
const core_1 = require("@sentry/core");
/**
 * Returns callback factory wrapped with try/catch
 * or the original passed value is it's not a function.
 *
 * If the factory fails original data are returned as it.
 * They might be partially modified by the failed function.
 */
function safeFactory(danger, options = {}) {
    if (typeof danger === 'function') {
        return (...args) => {
            try {
                return danger(...args);
            }
            catch (error) {
                core_1.logger.error(options.loggerMessage
                    ? options.loggerMessage
                    : `The ${danger.name} callback threw an error`, error);
                return args[0];
            }
        };
    }
    else {
        return danger;
    }
}
exports.safeFactory = safeFactory;
/**
 * Returns sage tracesSampler that returns 0 if the original failed.
 */
function safeTracesSampler(tracesSampler) {
    if (tracesSampler) {
        return (...args) => {
            try {
                return tracesSampler(...args);
            }
            catch (error) {
                core_1.logger.error('The tracesSampler callback threw an error', error);
                return 0;
            }
        };
    }
    else {
        return tracesSampler;
    }
}
exports.safeTracesSampler = safeTracesSampler;
//# sourceMappingURL=safeFactory.js.map
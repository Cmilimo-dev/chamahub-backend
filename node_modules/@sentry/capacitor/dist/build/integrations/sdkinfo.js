Object.defineProperty(exports, "__esModule", { value: true });
exports.sdkInfoIntegration = void 0;
const core_1 = require("@sentry/core");
const version_1 = require("../version");
const wrapper_1 = require("../wrapper");
const INTEGRATION_NAME = 'SdkInfo';
let NativeSdkPackage = null;
const sdkInfoIntegration = () => {
    return {
        name: INTEGRATION_NAME,
        processEvent: processEvent,
    };
};
exports.sdkInfoIntegration = sdkInfoIntegration;
async function processEvent(event) {
    // The native SDK info package here is only used on iOS as `beforeSend` is not called on `captureEnvelope`.
    // this._nativeSdkInfo should be defined a following time so this call won't always be awaited.
    if (wrapper_1.NATIVE.platform === 'ios' && NativeSdkPackage === null) {
        try {
            NativeSdkPackage = await wrapper_1.NATIVE.fetchNativeSdkInfo();
        }
        catch (_) {
            // If this fails, go ahead as usual as we would rather have the event be sent with a package missing.
            core_1.logger.warn('[SdkInfo] Native SDK Info retrieval failed...something could be wrong with your Sentry installation.');
        }
    }
    event.platform = event.platform || 'javascript';
    event.sdk = event.sdk || {};
    event.sdk.name = event.sdk.name || version_1.SDK_NAME;
    event.sdk.version = event.sdk.version || version_1.SDK_VERSION;
    event.sdk.packages = [
        // default packages are added by baseclient and should not be added here
        ...(event.sdk.packages || []),
        ...((NativeSdkPackage && [NativeSdkPackage]) || []),
        {
            name: 'npm:@sentry/capacitor',
            version: version_1.SDK_VERSION,
        },
    ];
    return event;
}
//# sourceMappingURL=sdkinfo.js.map
Object.defineProperty(exports, "__esModule", { value: true });
exports.enableSyncToNative = void 0;
const breadcrumb_1 = require("./breadcrumb");
const fill_1 = require("./utils/fill");
const normalize_1 = require("./utils/normalize");
const wrapper_1 = require("./wrapper");
/**
 * This WeakMap is used to keep track of which scopes have been synced to the native SDKs.
 * This ensures that we don't double sync the same scope.
 */
const syncedToNativeMap = new WeakMap();
/**
 * Hooks into the scope set methods and sync new data added to the given scope with the native SDKs.
 */
function enableSyncToNative(scope) {
    if (syncedToNativeMap.has(scope)) {
        return;
    }
    syncedToNativeMap.set(scope, true);
    (0, fill_1.fillTyped)(scope, 'setUser', original => (user) => {
        wrapper_1.NATIVE.setUser(user);
        return original.call(scope, user);
    });
    (0, fill_1.fillTyped)(scope, 'setTag', original => (key, value) => {
        wrapper_1.NATIVE.setTag(key, value);
        return original.call(scope, key, value);
    });
    (0, fill_1.fillTyped)(scope, 'setTags', original => (tags) => {
        // As native only has setTag, we just loop through each tag key.
        Object.keys(tags).forEach(key => {
            wrapper_1.NATIVE.setTag(key, tags[key]);
        });
        return original.call(scope, tags);
    });
    (0, fill_1.fillTyped)(scope, 'setExtras', original => (extras) => {
        Object.keys(extras).forEach(key => {
            wrapper_1.NATIVE.setExtra(key, extras[key]);
        });
        return original.call(scope, extras);
    });
    (0, fill_1.fillTyped)(scope, 'setExtra', original => (key, value) => {
        wrapper_1.NATIVE.setExtra(key, value);
        return original.call(scope, key, value);
    });
    (0, fill_1.fillTyped)(scope, 'addBreadcrumb', original => (breadcrumb, maxBreadcrumbs) => {
        const mergedBreadcrumb = {
            ...breadcrumb,
            level: breadcrumb.level || breadcrumb_1.DEFAULT_BREADCRUMB_LEVEL,
            data: breadcrumb.data ? (0, normalize_1.convertToNormalizedObject)(breadcrumb.data) : undefined,
        };
        original.call(scope, mergedBreadcrumb, maxBreadcrumbs);
        const finalBreadcrumb = scope.getLastBreadcrumb();
        if (finalBreadcrumb) {
            wrapper_1.NATIVE.addBreadcrumb(finalBreadcrumb);
        }
        return scope;
    });
    (0, fill_1.fillTyped)(scope, 'clearBreadcrumbs', original => () => {
        wrapper_1.NATIVE.clearBreadcrumbs();
        return original.call(scope);
    });
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (0, fill_1.fillTyped)(scope, 'setContext', original => (key, context) => {
        wrapper_1.NATIVE.setContext(key, context);
        return original.call(scope, key, context);
    });
}
exports.enableSyncToNative = enableSyncToNative;
//# sourceMappingURL=scopeSync.js.map
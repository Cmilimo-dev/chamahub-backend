{"version":3,"file":"rewriteframes.js","sourceRoot":"","sources":["../../../src/integrations/rewriteframes.ts"],"names":[],"mappings":"AACA,OAAO,EACL,wBAAwB,IAAI,gCAAgC,GAC7D,MAAM,cAAc,CAAC;AAEtB,OAAO,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAC;AAE1D;;;;GAIG;AACH,MAAM,CAAC,MAAM,iCAAiC,GAAG,GAAgB,EAAE;IACjE,OAAO,gCAAgC,CAAC;QACtC,QAAQ,EAAE,qBAAqB;KAChC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF;;;;;;GAMG;AACH,SAAS,qBAAqB,CAAC,KAAiB;IAC9C,IAAI,KAAK,CAAC,QAAQ,EAAE;QAClB,MAAM,eAAe,GAAG,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC5D,MAAM,SAAS,GAAG,mBAAmB,EAAE,CAAC;QACxC,IAAI,SAAS,EAAE;YACb,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;SACxD;aAAM;YACL,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ;iBAC5B,OAAO,CAAC,8BAA8B,EAAE,EAAE,CAAC;iBAC3C,OAAO,CAAC,iCAAiC,EAAE,EAAE,CAAC,CAAC;SACnD;QACD,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QAExD,MAAM,aAAa,GACjB,KAAK,CAAC,QAAQ,KAAK,eAAe,IAAI,KAAK,CAAC,QAAQ,KAAK,QAAQ,CAAC;QAEpE,IAAI,CAAC,aAAa,EAAE;YAClB,iEAAiE;YACjE,IAAI,CAAC,eAAe,EAAE;gBACpB,wCAAwC;gBACxC,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC;oBAC7C,CAAC,CAAC,KAAK,CAAC,QAAQ;oBAChB,CAAC,CAAC,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;gBACzB,MAAM,SAAS,GAAG,QAAQ,CAAC;gBAC3B,KAAK,CAAC,QAAQ,GAAG,GAAG,SAAS,GAAG,QAAQ,EAAE,CAAC;aAC5C;YAED,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;SACrB;aAAM;YACL,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC;SACtB;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import type { Integration, StackFrame } from '@sentry/core';\nimport {\n  rewriteFramesIntegration as originalRewriteFramesIntegration,\n} from '@sentry/core';\n\nimport { getCurrentServerUrl } from '../utils/webViewUrl';\n\n/**\n * Create Capacitor default rewrite frames integration\n * which appends app:// to the beginning of the filename\n * and removes the local server url prefixes.\n */\nexport const capacitorRewriteFramesIntegration = (): Integration => {\n  return originalRewriteFramesIntegration({\n    iteratee: rewriteFramesIteratee,\n  });\n};\n\n/**\n * Rewrites the filename of a stack frame for better readability.\n * - Removes server URL or localhost prefix.\n * - Adjusts for native code frames.\n * - Adds 'app://' prefix for non-http(s) frames.\n * - Sets 'in_app' flag to true for app frames, false for native frames.\n */\nfunction rewriteFramesIteratee(frame: StackFrame): StackFrame {\n  if (frame.filename) {\n    const isReachableHost = /^https?:\\/\\//.test(frame.filename);\n    const serverUrl = getCurrentServerUrl();\n    if (serverUrl) {\n      frame.filename = frame.filename.replace(serverUrl, '');\n    } else {\n      frame.filename = frame.filename\n        .replace(/^https?:\\/\\/localhost(:\\d+)?/, '')\n        .replace(/^capacitor:\\/\\/localhost(:\\d+)?/, '');\n    }\n    frame.filename = frame.filename.replace(/^ng:\\/\\//, '');\n\n    const isNativeFrame =\n      frame.filename === '[native code]' || frame.filename === 'native';\n\n    if (!isNativeFrame) {\n      // We don't need to use `app://` protocol for http(s) based hosts\n      if (!isReachableHost) {\n        // We always want to have a triple slash\n        const filename = frame.filename.startsWith('/')\n          ? frame.filename\n          : `/${frame.filename}`;\n        const appPrefix = 'app://';\n        frame.filename = `${appPrefix}${filename}`;\n      }\n\n      frame.in_app = true;\n    } else {\n      frame.in_app = false;\n    }\n  }\n  return frame;\n}\n"]}
{"version":3,"file":"safeFactory.js","sourceRoot":"","sources":["../../../src/utils/safeFactory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AAQtC;;;;;;GAMG;AACH,MAAM,UAAU,WAAW,CAKzB,MAA+B,EAC/B,UAEI,EAAE;IAEN,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;QAChC,OAAO,CAAC,GAAG,IAAI,EAAE,EAAE;YACjB,IAAI;gBACF,OAAO,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;aACxB;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,CAAC,KAAK,CACV,OAAO,CAAC,aAAa;oBACnB,CAAC,CAAC,OAAO,CAAC,aAAa;oBACvB,CAAC,CAAC,OAAO,MAAM,CAAC,IAAI,0BAA0B,EAChD,KAAK,CACN,CAAC;gBACF,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;aAChB;QACH,CAAC,CAAC;KACH;SAAM;QACL,OAAO,MAAM,CAAC;KACf;AACH,CAAC;AAID;;GAEG;AACH,MAAM,UAAU,iBAAiB,CAC/B,aAAgD;IAEhD,IAAI,aAAa,EAAE;QACjB,OAAO,CAAC,GAAG,IAA+B,EAA6B,EAAE;YACvE,IAAI;gBACF,OAAO,aAAa,CAAC,GAAG,IAAI,CAAC,CAAC;aAC/B;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,CAAC,KAAK,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;gBACjE,OAAO,CAAC,CAAC;aACV;QACH,CAAC,CAAC;KACH;SAAM;QACL,OAAO,aAAa,CAAC;KACtB;AACH,CAAC","sourcesContent":["import { logger } from '@sentry/core';\n\nimport type { CapacitorOptions } from '../options';\n\ntype DangerTypesWithoutCallSignature =\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  Object | null | undefined;\n\n/**\n * Returns callback factory wrapped with try/catch\n * or the original passed value is it's not a function.\n *\n * If the factory fails original data are returned as it.\n * They might be partially modified by the failed function.\n */\nexport function safeFactory<\n  A extends [R, ...unknown[]],\n  R,\n  T extends DangerTypesWithoutCallSignature,\n>(\n  danger: ((...args: A) => R) | T,\n  options: {\n    loggerMessage?: string;\n  } = {},\n): ((...args: A) => R) | T {\n  if (typeof danger === 'function') {\n    return (...args) => {\n      try {\n        return danger(...args);\n      } catch (error) {\n        logger.error(\n          options.loggerMessage\n            ? options.loggerMessage\n            : `The ${danger.name} callback threw an error`,\n          error,\n        );\n        return args[0];\n      }\n    };\n  } else {\n    return danger;\n  }\n}\n\ntype TracesSampler = Required<CapacitorOptions>['tracesSampler'];\n\n/**\n * Returns sage tracesSampler that returns 0 if the original failed.\n */\nexport function safeTracesSampler(\n  tracesSampler: CapacitorOptions['tracesSampler'],\n): CapacitorOptions['tracesSampler'] {\n  if (tracesSampler) {\n    return (...args: Parameters<TracesSampler>): ReturnType<TracesSampler> => {\n      try {\n        return tracesSampler(...args);\n      } catch (error) {\n        logger.error('The tracesSampler callback threw an error', error);\n        return 0;\n      }\n    };\n  } else {\n    return tracesSampler;\n  }\n}\n"]}
{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../../src/sdk.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BrowserOptions } from '@sentry/browser';\nimport { init as browserInit } from '@sentry/browser';\nimport type { Integration } from '@sentry/core';\nimport { getClient, getGlobalScope, getIntegrationsToSetup, getIsolationScope , logger } from '@sentry/core';\n\nimport { getDefaultIntegrations } from './integrations/default';\nimport type { CapacitorClientOptions, CapacitorOptions } from './options';\nimport { enableSyncToNative } from './scopeSync';\nimport { useEncodePolyfill } from './transports/encodePolyfill';\nimport { DEFAULT_BUFFER_SIZE, makeNativeTransport } from './transports/native';\nimport { safeFactory } from './utils/safeFactory';\nimport { IsTextEncoderAvailable } from './utils/textEncoder';\nimport { NATIVE } from './wrapper';\n\n/**\n * Initializes the Capacitor SDK alongside a sibling Sentry SDK\n * @param options Options for the SDK\n * @param originalInit The init function of the sibling SDK, leave blank to initialize with `@sentry/browser`\n */\nexport function init<T>(\n  passedOptions: CapacitorOptions & T,\n  originalInit: (passedOptions: T & BrowserOptions) => void = browserInit,\n): void {\n  const finalOptions = {\n    enableAutoSessionTracking: true,\n    enableWatchdogTerminationTracking: true,\n    enableCaptureFailedRequests: false,\n    ...passedOptions,\n  };\n  if (finalOptions.enabled === false || NATIVE.platform === 'web') {\n    finalOptions.enableNative = false;\n    finalOptions.enableNativeNagger = false;\n  } else {\n    // keep the original value if user defined it.\n    finalOptions.enableNativeNagger ??= true;\n    finalOptions.enableNative ??= true;\n  }\n  //  const capacitorHub = new Hub(undefined, new CapacitorScope());\n  //  makeMain(capacitorHub);\n  const defaultIntegrations: false | Integration[] =\n    passedOptions.defaultIntegrations === undefined\n      ? getDefaultIntegrations(passedOptions)\n      : passedOptions.defaultIntegrations;\n\n  finalOptions.integrations = getIntegrationsToSetup({\n    integrations: safeFactory(passedOptions.integrations, {\n      loggerMessage: 'The integrations threw an error',\n    }),\n    defaultIntegrations,\n  });\n\n  if (\n    finalOptions.enableNative &&\n    !passedOptions.transport &&\n    NATIVE.platform !== 'web'\n  ) {\n    finalOptions.transport = passedOptions.transport || makeNativeTransport;\n\n    finalOptions.transportOptions = {\n      ...(passedOptions.transportOptions ?? {}),\n      bufferSize: DEFAULT_BUFFER_SIZE,\n    };\n  }\n\n  if (!IsTextEncoderAvailable()) {\n    useEncodePolyfill();\n  }\n\n  if (finalOptions.enableNative) {\n    enableSyncToNative(getGlobalScope());\n    enableSyncToNative(getIsolationScope());\n  }\n\n  const browserOptions = {\n    ...finalOptions,\n    autoSessionTracking:\n      NATIVE.platform === 'web' && finalOptions.enableAutoSessionTracking,\n  } as BrowserOptions & T;\n\n  const mobileOptions = {\n    ...finalOptions,\n    enableAutoSessionTracking:\n      NATIVE.platform !== 'web' && finalOptions.enableAutoSessionTracking,\n  } as CapacitorClientOptions;\n\n  // We first initialize the NATIVE SDK to avoid the Javascript SDK to invoke any\n  // feature from the NATIVE SDK without the options being set.\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  void NATIVE.initNativeSdk(mobileOptions);\n  originalInit(browserOptions);\n}\n\n/**\n * Closes the SDK, stops sending events.\n */\nexport async function close(): Promise<void> {\n  try {\n    const client = getClient();\n\n    if (client) {\n      await client.close();\n      await NATIVE.closeNativeSdk();\n    }\n  } catch (e) {\n    logger.error('Failed to close the SDK');\n  }\n}\n\n/**\n * If native client is available it will trigger a native crash\n * Use this only for testing purposes\n */\nexport function nativeCrash(): void {\n  NATIVE.crash();\n}\n"]}

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { UserPlus, Mail, Phone } from "lucide-react";
import { useAuth } from "@/contexts/AuthContext";
import { apiClient } from '@/lib/api';
import { useToast } from "@/hooks/use-toast";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

interface JoinGroupModalProps {
  onGroupJoined?: () => void;
}

type Step = 'initial' | 'form' | 'success';

interface MembershipForm {
  firstName: string;
  lastName: string;
  phoneNumber: string;
  email: string;
}

const JoinGroupModal = ({ onGroupJoined }: JoinGroupModalProps) => {
  const { user } = useAuth();
  const { toast } = useToast();
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState<Step>('initial');
  const [contactMethod, setContactMethod] = useState<'email' | 'phone'>('email');
  const [contactValue, setContactValue] = useState("");
  const [selectedGroup, setSelectedGroup] = useState<any>(null);
  const [membershipForm, setMembershipForm] = useState<MembershipForm>({
    firstName: '',
    lastName: '',
    phoneNumber: '',
    email: ''
  });
  const [groups, setGroups] = useState<any[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [inviteCode, setInviteCode] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user || !inviteCode.trim()) return;

    setLoading(true);
    try {
      console.log('Searching for group with input:', inviteCode.trim());
      
      // Search for group by name
      const groups = await apiClient.get(`/groups/search?name=${encodeURIComponent(inviteCode.trim())}`);
      
      if (!groups || groups.length === 0) {
        throw new Error(`No active group found matching "${inviteCode.trim()}". Please check the group name or ask your admin for the correct name.`);
      }

      const group = groups[0];
      console.log('Found group:', group);

      // If multiple matches, inform user
      if (groups.length > 1) {
        toast({
          title: "Multiple groups found",
          description: `Found ${groups.length} groups matching "${inviteCode}". Joining "${group.name}".`,
          duration: 4000,
        });
      }

      // Check if user is already a member and add them to the group
      await apiClient.post(`/groups/${group.id}/members`, {
        user_id: user.id,
        role: 'member',
        status: 'active'
      });

      toast({
        title: "Success!",
        description: `Successfully joined "${group.name}"`,
        duration: 4000,
      });

      // Reset form and close modal
      setInviteCode("");
      setOpen(false);

      // Notify parent component
      if (onGroupJoined) {
        onGroupJoined();
      }

    } catch (error: any) {
      console.error('Error joining group:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to join group. Please try again.",
        variant: "destructive",
        duration: 6000,
      });
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    setInviteCode("");
    setOpen(false);
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" className="flex items-center gap-2">
          <UserPlus className="h-4 w-4" />
          Join Group
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[400px]">
        <DialogHeader>
          <DialogTitle>Join Chama Group</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="inviteCode">Group Name *</Label>
            <Input
              id="inviteCode"
              value={inviteCode}
              onChange={(e) => setInviteCode(e.target.value)}
              placeholder="Enter group name (e.g., Isaac Family, Isaac)"
              required
            />
            <p className="text-xs text-gray-500">
              You can enter the full group name or part of it. We'll search for matching active groups.
            </p>
          </div>

          <div className="flex gap-3 pt-4">
            <Button type="button" variant="outline" onClick={handleCancel} className="flex-1">
              Cancel
            </Button>
            <Button type="submit" disabled={loading || !inviteCode.trim()} className="flex-1">
              {loading ? "Searching..." : "Join Group"}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default JoinGroupModal;
